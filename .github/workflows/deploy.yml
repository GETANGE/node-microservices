name: Deploy to VPS

on:
  push:
    branches:
      - master

env:
  # Global Environment Variables
  NODE_ENV: ${{ vars.NODE_ENV }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

  # Gateway
  GATEWAY_PORT: ${{ vars.GATEWAY_PORT }}
  IDENTITY_SERVICE_URL: ${{ vars.IDENTITY_SERVICE_URL }}
  POST_SERVICE_URL: ${{ vars.POST_SERVICE_URL }}
  MEDIA_SERVICE_URL: ${{ vars.MEDIA_SERVICE_URL }}
  SEARCH_SERVICE_URL: ${{ vars.SEARCH_SERVICE_URL }}

  # Identity Service
  AUTH_PORT: ${{ vars.AUTH_PORT }}

  # Post Service
  POST_PORT: ${{ vars.POST_PORT }}

  # Media Service
  MEDIA_PORT: ${{ vars.MEDIA_PORT }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}

  # Search Service
  SEARCH_SERVICE_PORT: ${{ vars.SEARCH_SERVICE_PORT }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add VPS SSH host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Set up SSH key for authentication
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy env files to VPS
        run: |
          scp -i ~/.ssh/id_rsa ./Api-gateway/.env root@${{ secrets.VPS_HOST }}:/root/projects/node-microservices/Api-gateway/.env
          scp -i ~/.ssh/id_rsa ./Identity-service/.env root@${{ secrets.VPS_HOST }}:/root/projects/node-microservices/Identity-service/.env
          scp -i ~/.ssh/id_rsa ./Media-service/.env root@${{ secrets.VPS_HOST }}:/root/projects/node-microservices/Media-service/.env
          scp -i ~/.ssh/id_rsa ./Post-service/.env root@${{ secrets.VPS_HOST }}:/root/projects/node-microservices/Post-service/.env
          scp -i ~/.ssh/id_rsa ./Search-service/.env root@${{ secrets.VPS_HOST }}:/root/projects/node-microservices/Search-service/.env

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /root/projects/node-microservices
            git pull origin master
            docker-compose down
            docker-compose up --build -d

      - name: Debug SSH connection (optional)
        run: |
          ssh -v -i ~/.ssh/id_rsa root@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
        continue-on-error: true
