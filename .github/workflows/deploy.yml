name: Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /root/projects/node-microservices
            git pull origin master

            # Create .env files with proper formatting
            cat > post-service/.env <<EOF
            REDIS_URL=${REDIS_URL}
            RABBITMQ_URL=${RABBITMQ_URL}
            MONGO_URL=${MONGO_URI}
            POST_PORT =${POST_PORT}
            NODE_ENV=${NODE_ENV}
            EOF

            cat > Api-gateway/.env <<EOF
            REDIS_URL=${REDIS_URL}
            RABBITMQ_URL=${RABBITMQ_URL}
            IDENTITY_SERVICE_URL=${IDENTITY_SERVICE_URL}
            POST_SERVICE_URL=${POST_SERVICE_URL}
            MEDIA_SERVICE_URL=${MEDIA_SERVICE_URL}
            SEARCH_SERVICE_URL=${SEARCH_SERVICE_URL}
            GATEWAY_PORT = ${GATEWAY_PORT}
            EOF

            cat > Identity-service/.env <<EOF
            MONGO_URI=MONGO_URL=${MONGO_URI}
            NODE_ENV=${NODE_ENV}
            AUTH_PORT = ${AUTH_PORT}
            JWT_SECRET=${JWT_SECRET}
            REDIS_URL=${REDIS_URL}
            EOF

            cat > media-service/.env <<EOF
            MONGO_URI=MONGO_URL=${MONGO_URI}
            NODE_ENV=production
            MEDIA_PORT = ${MEDIA_PORT}
            JWT_SECRET=${JWT_SECRET}
            RABBITMQ_URL=${RABBITMQ_URL}
            CLOUDINARY_API_KEY =${CLOUDINARY_API_KEY}
            CLOUDINARY_API_SECRET =${CLOUDINARY_API_SECRET}
            CLOUDINARY_CLOUD_NAME =${CLOUDINARY_CLOUD_NAME}
            CLOUDINARY_URL= ${CLOUDINARY_URL}
            EOF

            cat > search-service/.env <<EOF
            MONGO_URI=MONGO_URL=${MONGO_URI}
            NODE_ENV=production
            SEARCH_SERVICE_PORT = ${SEARCH_SERVICE_PORT}
            RABBITMQ_URL=${RABBITMQ_URL}
            REDIS_URL=${REDIS_URL}
            EOF

            docker-compose down
            docker-compose up --build -d

        env:
          NODE_ENV: ${{ vars.NODE_ENV }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

          GATEWAY_PORT: ${{ vars.GATEWAY_PORT }}
          IDENTITY_SERVICE_URL: ${{ vars.IDENTITY_SERVICE_URL }}
          POST_SERVICE_URL: ${{ vars.POST_SERVICE_URL }}
          MEDIA_SERVICE_URL: ${{ vars.MEDIA_SERVICE_URL }}
          SEARCH_SERVICE_URL: ${{ vars.SEARCH_SERVICE_URL }}

          # Identity Service
          AUTH_PORT: ${{ vars.AUTH_PORT }}

          # Post Service
          POST_PORT: ${{ vars.POST_PORT }}

          # Media Service
          MEDIA_PORT: ${{ vars.MEDIA_PORT }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}

          # Search Service
          SEARCH_SERVICE_PORT: ${{ vars.SEARCH_SERVICE_PORT }}          

      - name: Debug SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
        continue-on-error: true